// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: dotadna/dotadna.proto

package dotadna

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DotadnaClient is the client API for Dotadna service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DotadnaClient interface {
	GetMatchList(ctx context.Context, in *MatchListReq, opts ...grpc.CallOption) (*MatchListResp, error)
	GetMatchDetial(ctx context.Context, in *MatchDetialReq, opts ...grpc.CallOption) (*MatchDetialResp, error)
}

type dotadnaClient struct {
	cc grpc.ClientConnInterface
}

func NewDotadnaClient(cc grpc.ClientConnInterface) DotadnaClient {
	return &dotadnaClient{cc}
}

func (c *dotadnaClient) GetMatchList(ctx context.Context, in *MatchListReq, opts ...grpc.CallOption) (*MatchListResp, error) {
	out := new(MatchListResp)
	err := c.cc.Invoke(ctx, "/api.dotadna.Dotadna/GetMatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dotadnaClient) GetMatchDetial(ctx context.Context, in *MatchDetialReq, opts ...grpc.CallOption) (*MatchDetialResp, error) {
	out := new(MatchDetialResp)
	err := c.cc.Invoke(ctx, "/api.dotadna.Dotadna/GetMatchDetial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DotadnaServer is the server API for Dotadna service.
// All implementations must embed UnimplementedDotadnaServer
// for forward compatibility
type DotadnaServer interface {
	GetMatchList(context.Context, *MatchListReq) (*MatchListResp, error)
	GetMatchDetial(context.Context, *MatchDetialReq) (*MatchDetialResp, error)
	mustEmbedUnimplementedDotadnaServer()
}

// UnimplementedDotadnaServer must be embedded to have forward compatible implementations.
type UnimplementedDotadnaServer struct {
}

func (UnimplementedDotadnaServer) GetMatchList(context.Context, *MatchListReq) (*MatchListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchList not implemented")
}
func (UnimplementedDotadnaServer) GetMatchDetial(context.Context, *MatchDetialReq) (*MatchDetialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchDetial not implemented")
}
func (UnimplementedDotadnaServer) mustEmbedUnimplementedDotadnaServer() {}

// UnsafeDotadnaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DotadnaServer will
// result in compilation errors.
type UnsafeDotadnaServer interface {
	mustEmbedUnimplementedDotadnaServer()
}

func RegisterDotadnaServer(s grpc.ServiceRegistrar, srv DotadnaServer) {
	s.RegisterService(&Dotadna_ServiceDesc, srv)
}

func _Dotadna_GetMatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DotadnaServer).GetMatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dotadna.Dotadna/GetMatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DotadnaServer).GetMatchList(ctx, req.(*MatchListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dotadna_GetMatchDetial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchDetialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DotadnaServer).GetMatchDetial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dotadna.Dotadna/GetMatchDetial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DotadnaServer).GetMatchDetial(ctx, req.(*MatchDetialReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Dotadna_ServiceDesc is the grpc.ServiceDesc for Dotadna service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dotadna_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dotadna.Dotadna",
	HandlerType: (*DotadnaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatchList",
			Handler:    _Dotadna_GetMatchList_Handler,
		},
		{
			MethodName: "GetMatchDetial",
			Handler:    _Dotadna_GetMatchDetial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dotadna/dotadna.proto",
}
