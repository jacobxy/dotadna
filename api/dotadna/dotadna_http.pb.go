// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.21.3
// source: dotadna/dotadna.proto

package dotadna

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDotadnaGetMatchDetial = "/api.dotadna.Dotadna/GetMatchDetial"
const OperationDotadnaGetMatchList = "/api.dotadna.Dotadna/GetMatchList"

type DotadnaHTTPServer interface {
	GetMatchDetial(context.Context, *MatchDetialReq) (*MatchDetialResp, error)
	GetMatchList(context.Context, *MatchListReq) (*MatchListResp, error)
}

func RegisterDotadnaHTTPServer(s *http.Server, srv DotadnaHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/match/list", _Dotadna_GetMatchList0_HTTP_Handler(srv))
	r.GET("/v1/match/detial", _Dotadna_GetMatchDetial0_HTTP_Handler(srv))
}

func _Dotadna_GetMatchList0_HTTP_Handler(srv DotadnaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MatchListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDotadnaGetMatchList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMatchList(ctx, req.(*MatchListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MatchListResp)
		return ctx.Result(200, reply)
	}
}

func _Dotadna_GetMatchDetial0_HTTP_Handler(srv DotadnaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MatchDetialReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDotadnaGetMatchDetial)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMatchDetial(ctx, req.(*MatchDetialReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MatchDetialResp)
		return ctx.Result(200, reply)
	}
}

type DotadnaHTTPClient interface {
	GetMatchDetial(ctx context.Context, req *MatchDetialReq, opts ...http.CallOption) (rsp *MatchDetialResp, err error)
	GetMatchList(ctx context.Context, req *MatchListReq, opts ...http.CallOption) (rsp *MatchListResp, err error)
}

type DotadnaHTTPClientImpl struct {
	cc *http.Client
}

func NewDotadnaHTTPClient(client *http.Client) DotadnaHTTPClient {
	return &DotadnaHTTPClientImpl{client}
}

func (c *DotadnaHTTPClientImpl) GetMatchDetial(ctx context.Context, in *MatchDetialReq, opts ...http.CallOption) (*MatchDetialResp, error) {
	var out MatchDetialResp
	pattern := "/v1/match/detial"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDotadnaGetMatchDetial))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DotadnaHTTPClientImpl) GetMatchList(ctx context.Context, in *MatchListReq, opts ...http.CallOption) (*MatchListResp, error) {
	var out MatchListResp
	pattern := "/v1/match/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDotadnaGetMatchList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
